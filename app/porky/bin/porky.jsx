/*	porky	(c)2009 - 2014 Dipl.-Ing. (FH) Oliver Grünberg	www.porky.io	Include this file in your JSX scripts before anything else 	#include ./porky.jsx;	Then go and fill your global variables	Start porky data source access	via commandline	php porky-db-access.php	Quit porky data source access	via web browser	http://127.0.0.1:6789/cXVpdCBwb3JreQo=	via command line	Get base64 encoded string	echo 'quit porky' | openssl base64	curl 127.0.0.1:6789/cXVpdCBwb3JreQo=*/#include ../lib/json-js/json_parse.js#include ../lib/json-js/json2.js#include ../lib/base64/base64-encode-decode.js//*****************************************************************************************************************************************************************/*	global variables*/dataSourceType = "";dataSourceServer = "";dataSourceName = "";dataSourceUsername = "";dataSourcePassword = "";syncScriptFolder = "";syncIdentifier = "";/*	limit porky to a special environment*//*if(app.name=="Adobe InDesign" && app.version.split(".")[0]!=6){	alert("Ooops, this version of porky only works with Adobe InDesign CS4...", "Attention!");	exit();}if(app.name=="ExtendScript Toolkit" && app.version.split(".")[0]!=3){	alert("Ooops, this version of porky only works with ExtendScript Toolkit v3...", "Attention!");	exit();}*//*	porky data source access*/function connectToDataSource(dataSourceQuery){            var getRequest = '{"porky":{"dataSourceType":"' + dataSourceType + '","dataSourceServer":"' + dataSourceServer + '","dataSourceName":"' + dataSourceName + '","dataSourceUsername":"' + dataSourceUsername + '","dataSourcePassword":"' + dataSourcePassword + '","dataSourceQuery":"' + dataSourceQuery + '"}}';    /*	    {	        "porky": {	            "dataSourceType": "SQLite",	            "dataSourceServer": "127.0.0.1",	            "dataSourceName": "TestDatabase",	            "dataSourceUsername": "Oliver",	            "dataSourcePassword": "1234",	            "dataSourceQuery": "SELECT * FROM bla"	        }	    }    */    var getRequestBase64 = Base64.encode(getRequest);    var reply = "";    var conn = new Socket;    conn.timeout = 600000;    if (conn.open ("127.0.0.1:6789", "UTF-8")) {        // send a HTTP GET request        var result = conn.write ("GET /" + getRequestBase64 + " HTTP/1.0\n\n");        // and read the server’s reply        reply = conn.read(99999999999);        var close = conn.close();    }else{        alert("Warning\nCannot establish porky data source access!");    }    if(reply.length < 1){        //alert("Empty result!", "porky");    }    if(reply.length > 0){        //decode reply from base64        reply = Base64.decode(reply);        return reply;    }}/*	porky core functions for Adobe InDesign*//*app.activeDocument.xmlViewPreferences.showAttributes = false;app.activeDocument.xmlViewPreferences.showStructure = false;app.activeDocument.xmlViewPreferences.showTaggedFrames = false;app.activeDocument.xmlViewPreferences.showTagMarkers = false;app.activeDocument.xmlViewPreferences.showTextSnippets = false;*/function addFrame(xFrame, yFrame, wFrame, hFrame, stringOrFile){	var tempFrame = app.activeWindow.activePage.rectangles.add();	var tempXFrame = xFrame;	var tempYFrame = yFrame;	var tempWFrame = wFrame + xFrame;	var tempHFrame = hFrame + yFrame;	tempFrame.geometricBounds = [tempYFrame, tempXFrame, tempHFrame, tempWFrame];	if(typeof(stringOrFile) == "string"){		tempFrame.contentType = 1952412773;		tempFrame.getElements()[0].contents = stringOrFile;		return tempFrame.getElements()[0];	}	if(typeof(stringOrFile) == "object"){		var tempPic = new File(stringOrFile);		tempFrame.place (tempPic, false);		return tempFrame;	}}function appendToFrame(frameObject, stringOrTwoDArray){	//Array -> Tabelle	if (stringOrTwoDArray instanceof Array){		//Höchste Anzahl benötigter Spalten herausfinden		var colMaxCount = new Array();		for(var newTableRowCounter=0; newTableRowCounter<=stringOrTwoDArray.length-1; newTableRowCounter++){			//alert(newTableArray[newTableRowCounter].length);			colMaxCount[newTableRowCounter] = stringOrTwoDArray[newTableRowCounter].length;		}		//Hilfsfunktion zum Zahlen sortieren		function numsort(a, b) {		  return b-a;		}		//Höchster Spaltenwert		colMaxCount = colMaxCount.sort(numsort)[0];		//Erste Zeile mit 1 Zelle exemplarisch anlegen		var tempAppendedTable = frameObject.tables.add();		tempAppendedTable.columnCount = colMaxCount; //Limit: 200		tempAppendedTable.bodyRowCount = 1;		//Inhaltszeilen anlegen        for(var newTableRowCounter=0; newTableRowCounter<=stringOrTwoDArray.length-1; newTableRowCounter++){			tempAppendedTable.rows[newTableRowCounter].contents = stringOrTwoDArray[newTableRowCounter];			tempAppendedTable.rows.add();		}		//Letzte leere Zeile entfernen		tempAppendedTable.rows.lastItem().remove();		return tempAppendedTable;	//Kein Array -> String	}else{		frameObject.parentStory.insertionPoints[-1].contents = stringOrTwoDArray;		var tempAppendedText = frameObject.parentStory.characters.itemByRange(-1, -stringOrTwoDArray.length);		return tempAppendedText;	}}function tagThis(tagObject, syncScript, syncIdentifier){	//SOLL: InsertionPoint, Word, Text, Paragraph, Character, TextColumn, Story, Table, TextFrame, Rectangle, Image	//IST:     InsertionPoint, Word, Text, Paragraph, Character, TextColumn,          , Table, TextFrame, Rectangle	var porkyTagElement = "";	var tempTagName = "porky";	//Textframe	if(tagObject == "[object TextFrame]"){		if(tagObject.parentStory.associatedXMLElement == null){			app.activeDocument.xmlElements.item(0).xmlElements.add(tempTagName, tagObject.parentStory);		}		if(!tagObject.parentStory.associatedXMLElement.xmlAttributes.item("syncScript").isValid){			tagObject.parentStory.associatedXMLElement.xmlAttributes.add("syncScript", syncScript);		}else{			tagObject.parentStory.associatedXMLElement.xmlAttributes.item("syncScript").value = syncScript;		}		if(!tagObject.parentStory.associatedXMLElement.xmlAttributes.item("syncIdentifier").isValid){			tagObject.parentStory.associatedXMLElement.xmlAttributes.add("syncIdentifier", syncIdentifier);		}else{			tagObject.parentStory.associatedXMLElement.xmlAttributes.item("syncIdentifier").value = syncIdentifier;		}		return tagObject.parentStory.associatedXMLElement;//XML Element zurückgeben	}	//Rectangle	if(tagObject == "[object Rectangle]"){		if(tagObject.associatedXMLElement == null){			app.activeDocument.xmlElements.item(0).xmlElements.add(tempTagName, tagObject);		}		if(!tagObject.associatedXMLElement.xmlAttributes.item("syncScript").isValid){			tagObject.associatedXMLElement.xmlAttributes.add("syncScript", syncScript);		}else{			tagObject.associatedXMLElement.xmlAttributes.item("syncScript").value = syncScript;		}		if(!tagObject.associatedXMLElement.xmlAttributes.item("syncIdentifier").isValid){			tagObject.associatedXMLElement.xmlAttributes.add("syncIdentifier", syncIdentifier);		}else{			tagObject.associatedXMLElement.xmlAttributes.item("syncIdentifier").value = syncIdentifier;		}		return tagObject.associatedXMLElement;//XML Element zurückgeben	}	if(tagObject == "[object Word]" || tagObject == "[object Paragraph]" || tagObject == "[object InsertionPoint]" || tagObject == "[object Character]" || tagObject == "[object Text]" || tagObject == "[object TextColumn]"){		//Bei direkter Verwendung des Objekts über eine Variable		if(tagObject.parent instanceof Array){			//[object Story] von tagObject taggen, falls nicht schon geschehen			try{				app.activeDocument.xmlElements.item(0).xmlElements.add(tempTagName, tagObject.parent[0]);			}catch(e){				//alert(e);			}		}		//Bei selection[0]		if(!tagObject.parent instanceof Array){			//[object Story] von tagObject taggen, falls nicht schon geschehen			try{				app.activeDocument.xmlElements.item(0).xmlElements.add(tempTagName, tagObject.parent);			}catch(e){				//alert(e);			}		}		if(tagObject.parent == "[object Story]"){			try{				//alert(tagObject.contents + "\n" + tagObject.associatedXMLElements[0].xmlContent.contents);				if( tagObject == tagObject.associatedXMLElements[0].xmlContent){					tempTagName = tagObject.associatedXMLElements[0].markupTag.name;					tagObject.associatedXMLElements[0].untag();				}			}catch(e){				//alert(e);			}			tagObject = app.activeDocument.xmlElements.item(0).xmlElements.add(tempTagName, tagObject);			tagObject.xmlAttributes.add("syncScript", syncScript);			tagObject.xmlAttributes.add("syncIdentifier", syncIdentifier);			return tagObject;//XML Element zurückgeben		}	}	//Table	if(tagObject == "[object Table]"){		try{			//alert(tagObject.contents + "\n" + tagObject.associatedXMLElement.xmlContent.contents);			if( tagObject == tagObject.associatedXMLElement.xmlContent){				tempTagName = tagObject.associatedXMLElement.markupTag.name;				tagObject.associatedXMLElement.untag();			}		}catch(e){			//alert(e);		}		tagObject = app.activeDocument.xmlElements.item(0).xmlElements.add(tempTagName, tagObject);		tagObject.xmlAttributes.add("syncScript", syncScript);		tagObject.xmlAttributes.add("syncIdentifier", syncIdentifier);		return tagObject;//XML Element zurückgeben	}else{		return tagObject;	}}function recursiveSyncFrame(frameObject){	var tempRes = "";	if (frameObject instanceof Array) {		//aus Array		for (var c = 0; c < frameObject.length; c++){			//Rahmen			if(frameObject[c] == "[object XMLElement]"){				tempRes = recursiveSyncXMLElement(frameObject[c]);			}			if(frameObject[c] == "[object TextFrame]" || frameObject[c] == "[object Rectangle]" || frameObject[c] == "[object Image]" || frameObject[c] == "[object Story]"){				tempRes = recursiveSyncXMLElement(frameObject[c].associatedXMLElement);			}		}	//direkt	} else {		//alert("direkt");		if(frameObject == "[object XMLElement]"){			tempRes = recursiveSyncXMLElement(frameObject);		}		if(frameObject == "[object TextFrame]" || frameObject == "[object Rectangle]" || frameObject == "[object Image]" || frameObject == "[object Story]"){			tempRes = recursiveSyncXMLElement(frameObject.associatedXMLElement);		}	}	return tempRes;}function recursiveSyncXMLElement(taggedXMLElement){	if(taggedXMLElement == "[object XMLElement]"){		syncXMLElement(taggedXMLElement);		//Sub Elemente		for(var i = 0; i < taggedXMLElement.xmlElements.length; i++){			//alert("Sub Element: " + taggedXMLElement.xmlElements[i].contents);			recursiveSyncXMLElement(taggedXMLElement.xmlElements[i]);		}		return taggedXMLElement;	}else{		return false;	}}function syncXMLElement(taggedXMLElement){	//Wenn kein XML Element reinkommt, dann vom Objekt das XML Element losschicken	if(taggedXMLElement != "[object XMLElement]"){		if(taggedXMLElement == "[object Table]" || taggedXMLElement == "[object TextFrame]" || taggedXMLElement == "[object Rectangle]" || taggedXMLElement == "[object Image]" || taggedXMLElement == "[object Story]"){			if(taggedXMLElement.associatedXMLElement.isValid){				syncXMLElement(taggedXMLElement.associatedXMLElement);			 }		 }		else if(taggedXMLElement == "[object Word]" || taggedXMLElement == "[object Paragraph]" || taggedXMLElement == "[object InsertionPoint]" || taggedXMLElement == "[object Character]" || taggedXMLElement == "[object Text]" || taggedXMLElement == "[object TextColumn]" || taggedXMLElement == "[object Line]"){			if(taggedXMLElement.associatedXMLElements[0].isValid){				syncXMLElement(taggedXMLElement.associatedXMLElements[0]);			}		 }else{			 return taggedXMLElement;		}	}else{//Nur wenn ein XML Element reinkommt		if(taggedXMLElement != null){			if(taggedXMLElement.xmlAttributes.length > 1){//WENN MINDESTENS 2 ATTRIBUTE DA SIND!!!				if(taggedXMLElement.xmlAttributes.item("syncScript").isValid && taggedXMLElement.xmlAttributes.item("syncIdentifier").isValid){                    // Set global variable syncIdentifier for use in external sync scripts                    syncIdentifier = taggedXMLElement.xmlAttributes.item("syncIdentifier").value;                     // alert("###: " + taggedXMLElement.xmlContent);					if (taggedXMLElement.xmlContent == "[object Image]" || taggedXMLElement.xmlContent == "[object EPS]" || taggedXMLElement.xmlContent == "[object PDF]" || taggedXMLElement.xmlContent == "[object PICT]" || taggedXMLElement.xmlContent == "[object WMF]"){						//taggedXMLElement.xmlContent.place (new File( $.evalFile(File(File($.fileName).parent.absoluteURI + taggedXMLElement.xmlAttributes.item("syncScript").value))), false);						//alert(syncScriptFolder + taggedXMLElement.xmlAttributes.item("syncScript").value);						taggedXMLElement.xmlContent.place (new File( $.evalFile(File(syncScriptFolder + taggedXMLElement.xmlAttributes.item("syncScript").value))), false);						return taggedXMLElement;					}					if (taggedXMLElement.xmlContent == "[object Story]" || taggedXMLElement.xmlContent == "[object Text]"){						// taggedXMLElement.contents = $.evalFile(File(File($.fileName).parent.absoluteURI + taggedXMLElement.xmlAttributes.item("syncScript").value));						// alert( syncScriptFolder + taggedXMLElement.xmlAttributes.item("syncScript").value );						taggedXMLElement.contents = $.evalFile(File(syncScriptFolder + taggedXMLElement.xmlAttributes.item("syncScript").value));                          // alert(taggedXMLElement.contents);                          return taggedXMLElement;					}					if (taggedXMLElement.xmlContent == "[object Table]"){						var newTableArray ="";						var tempRowsCount = "";						var tempColsCount = "";						//Inhalt für neue Tabelle aufnehmen; Format ist ein 2D-Array!!!						//newTableArray = $.evalFile(File(File($.fileName).parent.absoluteURI +taggedXMLElement.xmlAttributes.item("syncScript").value));						newTableArray = $.evalFile(File(syncScriptFolder + taggedXMLElement.xmlAttributes.item("syncScript").value));						//Zeilen löschen, bis auf 1						if (taggedXMLElement.xmlContent.rows.length>1){							tempRowsCount = taggedXMLElement.xmlContent.rows.length;							for(var rowCounter = 0; rowCounter < tempRowsCount-1; rowCounter++){								taggedXMLElement.xmlContent.rows.lastItem().remove();							}						}						//Spalten löschen, bis auf 1						if (taggedXMLElement.xmlContent.columns.length>1){							tempColsCount = taggedXMLElement.xmlContent.columns.length;							for(var colCounter = 0; colCounter< tempColsCount-1; colCounter++){								taggedXMLElement.xmlContent.columns.lastItem().remove();							}						}						//Höchste Anzahl benötigter Spalten herausfinden						var colMaxCount = new Array();						for(var newTableRowCounter=0; newTableRowCounter<=newTableArray.length-1; newTableRowCounter++){							//alert(newTableArray[newTableRowCounter].length);							colMaxCount[newTableRowCounter] = newTableArray[newTableRowCounter].length;						}						//Hilfsfunktion zum Zahlen sortieren						function numsort(a, b) {						  return b-a;						}						//Höchster Spaltenwert						colMaxCount = colMaxCount.sort(numsort)[0];						//Erste Zeile exemplarisch anlegen						for(var newTableColCounter=1; newTableColCounter<=colMaxCount-1; newTableColCounter++){							taggedXMLElement.xmlContent.columns.add();						}						//Inhaltszeilen anlegen						for(var newTableRowCounter=0; newTableRowCounter<=newTableArray.length-2; newTableRowCounter++){							taggedXMLElement.xmlContent.rows[newTableRowCounter].contents = newTableArray[newTableRowCounter];							taggedXMLElement.xmlContent.rows.add();						}						//Letzte leere Zeile entfernen						taggedXMLElement.xmlContent.rows.lastItem().remove();						return taggedXMLElement;					}else{						//alert("not yet supported: " + taggedXMLElement.xmlContent + ": " + taggedXMLElement.xmlContent.contents);						return false;					}				}else{					return false;				}			}		}	}}function createPlaceholderImage(){	//Platzhalter Bild aus Binärstring schreiben	var placeholderImageBinaryString = (new String("\u0089PNG\r\n\x1A\n\x00\x00\x00\rIHDR\x00\x00\x00a\x00\x00\x00X\b\x02\x00\x00\x00j\x11\x0E\u0091\x00\x00\x00\x01sRGB\x00\u00AE\u00CE\x1C\u00E9\x00\x00\x00\x04gAMA\x00\x00\u00B1\u008F\x0B\u00FCa\x05\x00\x00\x00 cHRM\x00\x00z&\x00\x00\u0080\u0084\x00\x00\u00FA\x00\x00\x00\u0080\u00E8\x00\x00u0\x00\x00\u00EA`\x00\x00:\u0098\x00\x00\x17p\u009C\u00BAQ<\x00\x00\x01ZIDATx^\u00ED\u00DA\u00C1\t\u00C2@\x00E\u00C1X\u00A0\u009D\u00A5\x02{\u00B1\x18+\u0089\x01\u00EF\u00CE!\u00EC\u00EA\u00C2\x0B\u00DE|F3~A\u00C4\u00DBq\x1C[\u00C7w\u0081\u00D3\u00A8\u00E3\u00BB\u00C0\x16\x10\x052\"\u00D1\u0091QF\x16p\u00D1\u008E2\u00B2\u0080\u008B\u0089;\u00DA\u00B6\u00F3\u009B\u00D8\u00A5\u009B/gH\u0091\u0091Y3\u00CA\u00C8\x02.\u00DAQF\x16p\u00D1\u008E2\u00B2\u0080\u008Bv\u0094\u0091\x05\\\u00B4\u00A3\u008C,\u00E0\u00A2\x1Ded\x01\x17\u00ED(#\x0B\u00B8hG\x19Y\u00C0E;\u00CA\u00C8\x02.\u00DAQF\x16p\u00D1\u008E2\u00B2\u0080\u008Bv\u0094\u0091\x05\\\u00B4\u00A3\u008C,\u00E0\u00A2\x1Ded\x01\x17\u00ED(#\x0B\u00B8XgG\u00FB\u00EE\u00AB\x19S\u00ACc\u00F4|\u008E\x11\u00F0Y3\u00CA\u00C8\x02.\u00DAQF\x16p\u00B1\u00CE\u008E^/_\u00CD\u0098b\u00A2\u00D1\u00FD\u00BE\u00E2\x1F\u008FO\u00F6\u0089F\u008FGF\x1A\u00FA\u00F9a\u00B9\u00F2\x1Fv\u009D~\u00DC\u00FD\x13w4\u00EE\"\x06\u009F9#\x03g\u0094\u0091\x05\\\u00B4\u00A3\u008C,\u00E0\u00A2\x1D\u00FD\u0095\u00D1\u0095/G\u009F\u00C7\u00FE\u00E8\u0098\u00F8\u00C4\x19\u00F9=\u00CE(#\x0B\u00B8hG\x19Y\u00C0E;\u00CA\u00C8\x02.\u00DAQF\x16p\u00D1\u008E2\u00B2\u0080\u008Bv\u0094\u0091\x05\\\u00B4\u00A3\u008C,\u00E0\u00A2\x1Ded\x01\x17\u00ED(#\x0B\u00B8hG6Z\u00B6\u0098\u00F8\u009B\x7FF\u00CB\n\u00F8\u0085\u00B7\u00A3\u008C,\u00E0\u00A2\x1Ded\x01\x17\u00ED(#\x0B\u00B8hG6z\x03\u009Cs\u00D4\u00CDK\u00B4\x14\u00F2\x00\x00\x00\x00IEND\u00AEB`\u0082"));	var placeholderImageFolder = new Folder( File($.fileName).parent);	placeholderImageFolder.create();	var placeholderImage = new File( placeholderImageFolder.absoluteURI + "/placeholderImage.png" );	placeholderImage.encoding = "BINARY";	placeholderImage.open("w");	placeholderImage.write(placeholderImageBinaryString);	placeholderImage.close();	return placeholderImage;}function stringToTwoDArray(separatedString, columnSeparator, rowSeparator){	if(separatedString == "" || columnSeparator == "" || rowSeparator == ""){		return false;	}else{		var hasColumnSeparator = separatedString.indexOf(columnSeparator);		var lastChar = separatedString.substring(separatedString.length-rowSeparator.length, separatedString.length);		if(lastChar != rowSeparator){			separatedString = separatedString + rowSeparator;		}		var array1D = new Array();		array1D = separatedString.split(rowSeparator);		var array2D = new Array();		for(zaehler1D = 0; zaehler1D < array1D.length-1; zaehler1D++){			array2D[zaehler1D] = new Array();			array2D[zaehler1D] = array1D[zaehler1D].split(columnSeparator);		}		array1D = null;		return array2D;	}}function twoDArrayToString(twoDArray, columnSeparator,rowSeparator){	var tempResult = "";	for (r=0;r<=twoDArray.length-1;r++){		tempResult += twoDArray[r].join(columnSeparator) + rowSeparator;	}	tempResult = tempResult.substring(0, (tempResult.length - rowSeparator.length));	return tempResult;}function addNewPage(){	var tempPage = app.activeDocument.pages.add(LocationOptions.AT_END);	app.activeWindow.activePage = tempPage;	return tempPage;}function moveObjectToPage(frameObject, pageObject){	var tempBounds = frameObject.geometricBounds;	app.activeDocument.viewPreferences.rulerOrigin = RulerOrigin.PAGE_ORIGIN;//ARGHH!	frameObject.move (pageObject);	frameObject.geometricBounds = tempBounds;	return frameObject;}function setPageSize(xWidth, yHeight){	app.activeDocument.documentPreferences.pageWidth = xWidth;	app.activeDocument.documentPreferences.pageHeight = yHeight;	return true;}function placeSnippet(snippetPath, xSnippet, ySnippet){	var tempSnippetPath = new File(snippetPath);	//var tempSnippet = app.activeDocument.pages[0].place(tempSnippetPath,[0, 0]);	var tempSnippet = app.activeWindow.activePage.place(tempSnippetPath,[xSnippet, ySnippet]);	return tempSnippet;}function searchReplaceTextframe(textframeObject, searchText, replaceText){	app.findTextPreferences = NothingEnum.nothing;	app.changeTextPreferences = NothingEnum.nothing;	app.findTextPreferences.findWhat = searchText;	app.changeTextPreferences.changeTo = replaceText;	textframeObject.parentStory.changeText();	return textframeObject;}