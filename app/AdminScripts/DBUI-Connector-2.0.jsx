#include ./lib/json-js/json_parse.js#include ./lib/base64/base64-encode-decode.js/*DBUI GLOBAL VARIABLES© 2009 - 2014 Oliver Grünbergwww.DBUI.de*/// Include this file in your JSX scripts before anything else // #include ./DBUI-Connector-2.0.jsx;// Then go and fill your global variables//Start DBUI//via commandline//php DBUI-2.0.php//Quit DBUI//via web browser//http://127.0.0.1:6789/cXVpdCBEQlVJCg==//via command line//Get base64 encoded string//echo 'quit DBUI' | openssl base64//curl 127.0.0.1:6789/cXVpdCBEQlVJCg==//*****************************************************************************************************************************************************************/*GLOBAL VARIABLES*/sqlDatabaseType = "";sqlServerAddress = "";sqlDatabaseName = "";sqlUsername = "";sqlPassword = "";syncScriptFolder = "";syncIdentifier = "";/*DBUI CONNECTOR© 2009 - 2014 Oliver Grünbergwww.DBUI.de*/function connectToDatabase(sqlStatement){            var getRequest = '{"DBUI":{"sqlDatabaseType":"' + sqlDatabaseType + '","sqlServerAddress":"' + sqlServerAddress + '","sqlDatabaseName":"' + sqlDatabaseName + '","sqlUsername":"' + sqlUsername + '","sqlPassword":"' + sqlPassword + '","sqlStatement":"' + sqlStatement + '"}}';    /*    {        "DBUI": {            "sqlDatabaseType": "SQLite",            "sqlServerAddress": "127.0.0.1",            "sqlDatabaseName": "TestDatabase",            "sqlUsername": "Oliver",            "sqlPassword": "1234",            "sqlStatement": "SELECT * FROM bla"        }    }    */    var getRequestBase64 = Base64.encode(getRequest);    var reply = "";    var conn = new Socket;    conn.timeout = 600000;    if (conn.open ("127.0.0.1:6789", "UTF-8")) {        // send a HTTP GET request        var result = conn.write ("GET /" + getRequestBase64 + " HTTP/1.0\n\n");        // and read the server’s reply        reply = conn.read(99999999999);        var close = conn.close();    }else{        alert("Warning: No connection to DBUI!");    }    if(reply.length < 1){        //alert("Empty result!", "DBUI");    }    if(reply.length > 0){        //decode reply from base64        reply = Base64.decode(reply);        return reply;    }}//*****************************************************************************************************************************************************************/*DBUI CORE FUNCTIONS© 2009 - 2014 Oliver Grünbergwww.DBUI.de*//*if(app.name=="Adobe InDesign" && app.version.split(".")[0]!=6){	alert("Ooops, this version of DBUI only works with Adobe InDesign CS4...", "Attention!");	exit();	}if(app.name=="ExtendScript Toolkit" && app.version.split(".")[0]!=3){	alert("Ooops, this version of DBUI only works with ExtendScript Toolkit v3...", "Attention!");	exit();	}*///##########################################################//app.activeDocument.xmlViewPreferences.showAttributes = false;//app.activeDocument.xmlViewPreferences.showStructure = false;//app.activeDocument.xmlViewPreferences.showTaggedFrames = false;//app.activeDocument.xmlViewPreferences.showTagMarkers = false;//app.activeDocument.xmlViewPreferences.showTextSnippets = false;function AddFrame(xFrame, yFrame, wFrame, hFrame, StringOrFile){	var TempFrame = app.activeWindow.activePage.rectangles.add();	var TempxFrame = xFrame;	var TempyFrame = yFrame;	var TempwFrame = wFrame + xFrame;	var TemphFrame = hFrame + yFrame;	TempFrame.geometricBounds = [TempyFrame, TempxFrame, TemphFrame, TempwFrame];	if(typeof(StringOrFile) == "string"){		TempFrame.contentType = 1952412773;		TempFrame.getElements()[0].contents = StringOrFile;		return TempFrame.getElements()[0];	}	if(typeof(StringOrFile) == "object"){		var TempPic = new File(StringOrFile);		TempFrame.place (TempPic, false);		return TempFrame;	}}function AppendToFrame(FrameObject, StringOrTwoDArray){	//Array -> Tabelle	if (StringOrTwoDArray instanceof Array){		//Höchste Anzahl benötigter Spalten herausfinden		var ColMaxCount = new Array();		for(var NewTableRowCounter=0; NewTableRowCounter<=StringOrTwoDArray.length-1; NewTableRowCounter++){			//alert(NewTableArray[NewTableRowCounter].length);			ColMaxCount[NewTableRowCounter] = StringOrTwoDArray[NewTableRowCounter].length;		}		//Hilfsfunktion zum Zahlen sortieren		function Numsort (a, b) {		  return b-a;		}		//Höchster Spaltenwert		ColMaxCount = ColMaxCount.sort(Numsort)[0];		//Erste Zeile mit 1 Zelle exemplarisch anlegen		var TempAppendedTable = FrameObject.tables.add();		TempAppendedTable.columnCount = ColMaxCount; //Limit: 200		TempAppendedTable.bodyRowCount = 1;		//Inhaltszeilen anlegen		for(var NewTableRowCounter=0; NewTableRowCounter<=StringOrTwoDArray.length-2; NewTableRowCounter++){			TempAppendedTable.rows[NewTableRowCounter].contents = StringOrTwoDArray[NewTableRowCounter];			TempAppendedTable.rows.add();		}		//Letzte leere Zeile entfernen		TempAppendedTable.rows.lastItem().remove();		return TempAppendedTable;	//Kein Array -> String	}else{		FrameObject.parentStory.insertionPoints[-1].contents = StringOrTwoDArray;		var TempAppendedText = FrameObject.parentStory.characters.itemByRange(-1, -StringOrTwoDArray.length);		return TempAppendedText;	}}function TagThis(TagObject, SyncScript, SyncIdentifier){	//SOLL: InsertionPoint, Word, Text, Paragraph, Character, TextColumn, Story, Table, TextFrame, Rectangle, Image	//IST:     InsertionPoint, Word, Text, Paragraph, Character, TextColumn,          , Table, TextFrame, Rectangle	var DBUITagElement = "";	var TempTagName = "DBUI";	//Textframe	if(TagObject == "[object TextFrame]"){		if(TagObject.parentStory.associatedXMLElement == null){			app.activeDocument.xmlElements.item(0).xmlElements.add(TempTagName, TagObject.parentStory);		}		if(!TagObject.parentStory.associatedXMLElement.xmlAttributes.item("SyncScript").isValid){			TagObject.parentStory.associatedXMLElement.xmlAttributes.add("SyncScript", SyncScript);		}else{			TagObject.parentStory.associatedXMLElement.xmlAttributes.item("SyncScript").value = SyncScript;		}		if(!TagObject.parentStory.associatedXMLElement.xmlAttributes.item("SyncIdentifier").isValid){			TagObject.parentStory.associatedXMLElement.xmlAttributes.add("SyncIdentifier", SyncIdentifier);		}else{			TagObject.parentStory.associatedXMLElement.xmlAttributes.item("SyncIdentifier").value = SyncIdentifier;		}		return TagObject.parentStory.associatedXMLElement;//XML Element zurückgeben	}	//Rectangle	if(TagObject == "[object Rectangle]"){		if(TagObject.associatedXMLElement == null){			app.activeDocument.xmlElements.item(0).xmlElements.add(TempTagName, TagObject);		}		if(!TagObject.associatedXMLElement.xmlAttributes.item("SyncScript").isValid){			TagObject.associatedXMLElement.xmlAttributes.add("SyncScript", SyncScript);		}else{			TagObject.associatedXMLElement.xmlAttributes.item("SyncScript").value = SyncScript;		}		if(!TagObject.associatedXMLElement.xmlAttributes.item("SyncIdentifier").isValid){			TagObject.associatedXMLElement.xmlAttributes.add("SyncIdentifier", SyncIdentifier);		}else{			TagObject.associatedXMLElement.xmlAttributes.item("SyncIdentifier").value = SyncIdentifier;		}		return TagObject.associatedXMLElement;//XML Element zurückgeben	}	if(TagObject == "[object Word]" || TagObject == "[object Paragraph]" || TagObject == "[object InsertionPoint]" || TagObject == "[object Character]" || TagObject == "[object Text]" || TagObject == "[object TextColumn]"){		//Bei direkter Verwendung des Objekts über eine Variable		if(TagObject.parent instanceof Array){			//[object Story] von TagObject taggen, falls nicht schon geschehen			try{				app.activeDocument.xmlElements.item(0).xmlElements.add(TempTagName, TagObject.parent[0]);			}catch(e){				//alert(e);			}		}		//Bei selection[0]		if(!TagObject.parent instanceof Array){			//[object Story] von TagObject taggen, falls nicht schon geschehen			try{				app.activeDocument.xmlElements.item(0).xmlElements.add(TempTagName, TagObject.parent);			}catch(e){				//alert(e);			}		}		if(TagObject.parent == "[object Story]"){			try{				//alert(TagObject.contents + "\n" + TagObject.associatedXMLElements[0].xmlContent.contents);				if( TagObject == TagObject.associatedXMLElements[0].xmlContent){					TempTagName = TagObject.associatedXMLElements[0].markupTag.name;					TagObject.associatedXMLElements[0].untag();				}			}catch(e){				//alert(e);			}			TagObject = app.activeDocument.xmlElements.item(0).xmlElements.add(TempTagName, TagObject);			TagObject.xmlAttributes.add("SyncScript", SyncScript);			TagObject.xmlAttributes.add("SyncIdentifier", SyncIdentifier);			return TagObject;//XML Element zurückgeben		}	}	//Table	if(TagObject == "[object Table]"){		try{			//alert(TagObject.contents + "\n" + TagObject.associatedXMLElement.xmlContent.contents);			if( TagObject == TagObject.associatedXMLElement.xmlContent){				TempTagName = TagObject.associatedXMLElement.markupTag.name;				TagObject.associatedXMLElement.untag();			}		}catch(e){			//alert(e);		}		TagObject = app.activeDocument.xmlElements.item(0).xmlElements.add(TempTagName, TagObject);		TagObject.xmlAttributes.add("SyncScript", SyncScript);		TagObject.xmlAttributes.add("SyncIdentifier", SyncIdentifier);		return TagObject;//XML Element zurückgeben	}else{		return TagObject;	}}function RecursiveSyncFrame(FrameObject){	var TempRes = "";	if (FrameObject instanceof Array) {		//aus Array		for (var c = 0; c < FrameObject.length; c++){			//Rahmen			if(FrameObject[c] == "[object XMLElement]"){				TempRes = RecursiveSyncXMLElement(FrameObject[c]);			}			if(FrameObject[c] == "[object TextFrame]" || FrameObject[c] == "[object Rectangle]" || FrameObject[c] == "[object Image]" || FrameObject[c] == "[object Story]"){				TempRes = RecursiveSyncXMLElement(FrameObject[c].associatedXMLElement);			}		}	//direkt	} else {		//alert("direkt");		if(FrameObject == "[object XMLElement]"){			TempRes = RecursiveSyncXMLElement(FrameObject);		}		if(FrameObject == "[object TextFrame]" || FrameObject == "[object Rectangle]" || FrameObject == "[object Image]" || FrameObject == "[object Story]"){			TempRes = RecursiveSyncXMLElement(FrameObject.associatedXMLElement);		}	}	return TempRes;}function RecursiveSyncXMLElement(TaggedXMLElement){	if(TaggedXMLElement == "[object XMLElement]"){		SyncXMLElement(TaggedXMLElement);		//Sub Elemente		for(var i = 0; i < TaggedXMLElement.xmlElements.length; i++){			//alert("Sub Element: " + TaggedXMLElement.xmlElements[i].contents);			RecursiveSyncXMLElement(TaggedXMLElement.xmlElements[i]);		}		return TaggedXMLElement;	}else{		return false;	}}function SyncXMLElement(TaggedXMLElement){	//Wenn kein XML Element reinkommt, dann vom Objekt das XML Element losschicken	if(TaggedXMLElement != "[object XMLElement]"){		if(TaggedXMLElement == "[object Table]" || TaggedXMLElement == "[object TextFrame]" || TaggedXMLElement == "[object Rectangle]" || TaggedXMLElement == "[object Image]" || TaggedXMLElement == "[object Story]"){			if(TaggedXMLElement.associatedXMLElement.isValid){				SyncXMLElement(TaggedXMLElement.associatedXMLElement);			 }		 }		else if(TaggedXMLElement == "[object Word]" || TaggedXMLElement == "[object Paragraph]" || TaggedXMLElement == "[object InsertionPoint]" || TaggedXMLElement == "[object Character]" || TaggedXMLElement == "[object Text]" || TaggedXMLElement == "[object TextColumn]" || TaggedXMLElement == "[object Line]"){			if(TaggedXMLElement.associatedXMLElements[0].isValid){				SyncXMLElement(TaggedXMLElement.associatedXMLElements[0]);			}		 }else{			 return TaggedXMLElement;		}	}else{//Nur wenn ein XML Element reinkommt		if(TaggedXMLElement != null){			if(TaggedXMLElement.xmlAttributes.length > 1){//WENN MINDESTENS 2 ATTRIBUTE DA SIND!!!				if(TaggedXMLElement.xmlAttributes.item("SyncScript").isValid && TaggedXMLElement.xmlAttributes.item("SyncIdentifier").isValid){					//SyncIdentifier = TaggedXMLElement.xmlAttributes.item("SyncIdentifier").value;//GLOBAL für externe Scripte					if (TaggedXMLElement.xmlContent == "[object Image]" || TaggedXMLElement.xmlContent == "[object EPS]" || TaggedXMLElement.xmlContent == "[object PDF]" || TaggedXMLElement.xmlContent == "[object PICT]" || TaggedXMLElement.xmlContent == "[object WMF]"){						//TaggedXMLElement.xmlContent.place (new File( $.evalFile(File(File($.fileName).parent.absoluteURI + TaggedXMLElement.xmlAttributes.item("SyncScript").value))), false);						//alert(SyncScriptFolder + TaggedXMLElement.xmlAttributes.item("SyncScript").value);						TaggedXMLElement.xmlContent.place (new File( $.evalFile(File(SyncScriptFolder + TaggedXMLElement.xmlAttributes.item("SyncScript").value))), false);						return TaggedXMLElement;					}					if (TaggedXMLElement.xmlContent == "[object Story]" || TaggedXMLElement.xmlContent == "[object Text]"){						//TaggedXMLElement.contents = $.evalFile(File(File($.fileName).parent.absoluteURI + TaggedXMLElement.xmlAttributes.item("SyncScript").value));						//alert(TaggedXMLElement.xmlAttributes.item("SyncScript").value);						TaggedXMLElement.contents = $.evalFile(File(SyncScriptFolder + TaggedXMLElement.xmlAttributes.item("SyncScript").value));						return TaggedXMLElement;					}					if (TaggedXMLElement.xmlContent == "[object Table]"){						var NewTableArray ="";						var TempRowsCount = "";						var TempColsCount = "";						//Inhalt für neue Tabelle aufnehmen; Format ist ein 2D-Array!!!						//NewTableArray = $.evalFile(File(File($.fileName).parent.absoluteURI +TaggedXMLElement.xmlAttributes.item("SyncScript").value));						NewTableArray = $.evalFile(File(SyncScriptFolder + TaggedXMLElement.xmlAttributes.item("SyncScript").value));						//Zeilen löschen, bis auf 1						if (TaggedXMLElement.xmlContent.rows.length>1){							TempRowsCount = TaggedXMLElement.xmlContent.rows.length;							for(var RowCounter = 0; RowCounter < TempRowsCount-1; RowCounter++){								TaggedXMLElement.xmlContent.rows.lastItem().remove();							}						}						//Spalten löschen, bis auf 1						if (TaggedXMLElement.xmlContent.columns.length>1){							TempColsCount = TaggedXMLElement.xmlContent.columns.length;							for(var ColCounter = 0; ColCounter< TempColsCount-1; ColCounter++){								TaggedXMLElement.xmlContent.columns.lastItem().remove();							}						}						//Höchste Anzahl benötigter Spalten herausfinden						var ColMaxCount = new Array();						for(var NewTableRowCounter=0; NewTableRowCounter<=NewTableArray.length-1; NewTableRowCounter++){							//alert(NewTableArray[NewTableRowCounter].length);							ColMaxCount[NewTableRowCounter] = NewTableArray[NewTableRowCounter].length;						}						//Hilfsfunktion zum Zahlen sortieren						function Numsort (a, b) {						  return b-a;						}						//Höchster Spaltenwert						ColMaxCount = ColMaxCount.sort(Numsort)[0];						//Erste Zeile exemplarisch anlegen						for(var NewTableColCounter=1; NewTableColCounter<=ColMaxCount-1; NewTableColCounter++){							TaggedXMLElement.xmlContent.columns.add();						}						//Inhaltszeilen anlegen						for(var NewTableRowCounter=0; NewTableRowCounter<=NewTableArray.length-2; NewTableRowCounter++){							TaggedXMLElement.xmlContent.rows[NewTableRowCounter].contents = NewTableArray[NewTableRowCounter];							TaggedXMLElement.xmlContent.rows.add();						}						//Letzte leere Zeile entfernen						TaggedXMLElement.xmlContent.rows.lastItem().remove();						return TaggedXMLElement;					}else{						//alert("not yet supported: " + TaggedXMLElement.xmlContent + ": " + TaggedXMLElement.xmlContent.contents);						return false;					}				}else{					return false;				}			}		}	}}function CreatePlaceholderImage(){	//Platzhalter Bild aus Binärstring schreiben	var PlaceholderImageBinaryString = (new String("\u0089PNG\r\n\x1A\n\x00\x00\x00\rIHDR\x00\x00\x00a\x00\x00\x00X\b\x02\x00\x00\x00j\x11\x0E\u0091\x00\x00\x00\x01sRGB\x00\u00AE\u00CE\x1C\u00E9\x00\x00\x00\x04gAMA\x00\x00\u00B1\u008F\x0B\u00FCa\x05\x00\x00\x00 cHRM\x00\x00z&\x00\x00\u0080\u0084\x00\x00\u00FA\x00\x00\x00\u0080\u00E8\x00\x00u0\x00\x00\u00EA`\x00\x00:\u0098\x00\x00\x17p\u009C\u00BAQ<\x00\x00\x01ZIDATx^\u00ED\u00DA\u00C1\t\u00C2@\x00E\u00C1X\u00A0\u009D\u00A5\x02{\u00B1\x18+\u0089\x01\u00EF\u00CE!\u00EC\u00EA\u00C2\x0B\u00DE|F3~A\u00C4\u00DBq\x1C[\u00C7w\u0081\u00D3\u00A8\u00E3\u00BB\u00C0\x16\x10\x052\"\u00D1\u0091QF\x16p\u00D1\u008E2\u00B2\u0080\u008B\u0089;\u00DA\u00B6\u00F3\u009B\u00D8\u00A5\u009B/gH\u0091\u0091Y3\u00CA\u00C8\x02.\u00DAQF\x16p\u00D1\u008E2\u00B2\u0080\u008Bv\u0094\u0091\x05\\\u00B4\u00A3\u008C,\u00E0\u00A2\x1Ded\x01\x17\u00ED(#\x0B\u00B8hG\x19Y\u00C0E;\u00CA\u00C8\x02.\u00DAQF\x16p\u00D1\u008E2\u00B2\u0080\u008Bv\u0094\u0091\x05\\\u00B4\u00A3\u008C,\u00E0\u00A2\x1Ded\x01\x17\u00ED(#\x0B\u00B8XgG\u00FB\u00EE\u00AB\x19S\u00ACc\u00F4|\u008E\x11\u00F0Y3\u00CA\u00C8\x02.\u00DAQF\x16p\u00B1\u00CE\u008E^/_\u00CD\u0098b\u00A2\u00D1\u00FD\u00BE\u00E2\x1F\u008FO\u00F6\u0089F\u008FGF\x1A\u00FA\u00F9a\u00B9\u00F2\x1Fv\u009D~\u00DC\u00FD\x13w4\u00EE\"\x06\u009F9#\x03g\u0094\u0091\x05\\\u00B4\u00A3\u008C,\u00E0\u00A2\x1D\u00FD\u0095\u00D1\u0095/G\u009F\u00C7\u00FE\u00E8\u0098\u00F8\u00C4\x19\u00F9=\u00CE(#\x0B\u00B8hG\x19Y\u00C0E;\u00CA\u00C8\x02.\u00DAQF\x16p\u00D1\u008E2\u00B2\u0080\u008Bv\u0094\u0091\x05\\\u00B4\u00A3\u008C,\u00E0\u00A2\x1Ded\x01\x17\u00ED(#\x0B\u00B8hG6Z\u00B6\u0098\u00F8\u009B\x7FF\u00CB\n\u00F8\u0085\u00B7\u00A3\u008C,\u00E0\u00A2\x1Ded\x01\x17\u00ED(#\x0B\u00B8hG6z\x03\u009Cs\u00D4\u00CDK\u00B4\x14\u00F2\x00\x00\x00\x00IEND\u00AEB`\u0082"));	var PlaceholderImageFolder = new Folder( File($.fileName).parent);	PlaceholderImageFolder.create();	PlaceholderImage = new File( PlaceholderImageFolder.absoluteURI + "/PlaceholderImage.png" );	PlaceholderImage.encoding = "BINARY";	PlaceholderImage.open("w");	PlaceholderImage.write(PlaceholderImageBinaryString);	PlaceholderImage.close();	return PlaceholderImage;}function StringToTwoDArray(SeparatedString, ColumnSeparator, RowSeparator){	if(SeparatedString == "" || ColumnSeparator == "" || RowSeparator == ""){		return false;	}else{		var HasColumnSeparator = SeparatedString.indexOf(ColumnSeparator);		var LastChar = SeparatedString.substring(SeparatedString.length-RowSeparator.length, SeparatedString.length);		if(LastChar != RowSeparator){			SeparatedString = SeparatedString + RowSeparator;		}		var Array1D = new Array();		Array1D = SeparatedString.split(RowSeparator);		var Array2D = new Array();		for (Zaehler1D = 0; Zaehler1D < Array1D.length; Zaehler1D++) {			Array2D[Zaehler1D] = new Array();			Array2D[Zaehler1D] = Array1D[Zaehler1D].split(ColumnSeparator);		}		Array1D = null;		return Array2D;	}}function TwoDArrayToString(TwoDArray, ColumnSeparator,RowSeparator){	var TempResult = "";	for (r=0;r<TwoDArray.length-1;r++){		TempResult += TwoDArray[r].join(ColumnSeparator) + RowSeparator;	}	TempResult = TempResult.substring(0, (TempResult.length - RowSeparator.length));	return TempResult;}function AddNewPage(){	var TempPage = app.activeDocument.pages.add(LocationOptions.AT_END);	app.activeWindow.activePage = TempPage;	return TempPage;}function MoveObjectToPage(FrameObject, PageObject){	var TempBounds = FrameObject.geometricBounds;	app.activeDocument.viewPreferences.rulerOrigin = RulerOrigin.PAGE_ORIGIN;//ARGHH!	FrameObject.move (PageObject);	FrameObject.geometricBounds = TempBounds;	return FrameObject;}function SetPageSize(xWidth, yHeight){	app.activeDocument.documentPreferences.pageWidth = xWidth;	app.activeDocument.documentPreferences.pageHeight = yHeight;	return true;}function PlaceSnippet(SnippetPath, xSnippet, ySnippet){	var TempSnippetPath = new File(SnippetPath);	//var TempSnippet = app.activeDocument.pages[0].place(TempSnippetPath,[0, 0]);	var TempSnippet = app.activeWindow.activePage.place(TempSnippetPath,[xSnippet, ySnippet]);	return TempSnippet;}function SearchReplaceTextframe(TextframeObject, SearchText, ReplaceText){	app.findTextPreferences = NothingEnum.nothing;	app.changeTextPreferences = NothingEnum.nothing;	app.findTextPreferences.findWhat = SearchText;	app.changeTextPreferences.changeTo = ReplaceText;	TextframeObject.parentStory.changeText();	return TextframeObject;}